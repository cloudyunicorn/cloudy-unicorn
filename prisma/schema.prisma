// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum FitnessGoal {
  WEIGHT_LOSS
  MUSCLE_GAIN
  MAINTENANCE
  ENDURANCE
  FLEXIBILITY
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ChallengeType {
  NUTRITION
  FITNESS
  MINDFULNESS
  HYDRATION
}

model User {
  id              String             @id @default(uuid())
  email           String             @unique
  name            String?
  authId          String             @unique @map("auth_id")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  profile         UserProfile?
  mealPlans       MealPlan[]
  workoutPrograms WorkoutProgram[]
  challenges      UserChallenge[]
  progressLogs    ProgressLog[]
  bodyMeasurements BodyMeasurement[]
  healthAssessments AIHealthAssessment[]
  workoutSessions WorkoutSession[]
  feedbacks       Feedback[]
  goals           FitnessGoal[]     @default([])

  @@index([email, createdAt])
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum ActivityLevel {
  SEDENTARY
  LIGHTLY_ACTIVE
  MODERATELY_ACTIVE
  VERY_ACTIVE
  EXTREMELY_ACTIVE
}

model UserProfile {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @unique
  age              Int?
  weight           Float?
  height           Float?
  bodyFatPercentage Float?
  gender           Gender?
  dietaryPreferences String[]
  fitnessLevel     DifficultyLevel?
  targetWeight     Float?
  activityLevel   ActivityLevel?
  createdAt        DateTime  @default(now()) @map("created_at")
  
  @@index([userId, age])
}

model MealPlan {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  title        String
  description  String?
  days         Json       // Structured as { day: 1, meals: [...] }
  caloriesPerDay Int
  dietaryTags  String[]   // e.g., ["vegetarian", "high-protein"]
  isActive     Boolean    @default(false)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@index([userId, createdAt])
}

model Exercise {
  id           String     @id @default(uuid())
  name         String
  description  String
  equipment    String[]
  muscleGroup  String[]
  difficulty   DifficultyLevel
  weight       Float?     // Tracked weight for the exercise
  reps         Int?       // Tracked repetitions
  sets         Int?       // Number of sets
  createdAt    DateTime   @default(now()) @map("created_at")
  
  workoutPrograms WorkoutProgram[]

  @@index([name, muscleGroup])
}

model WorkoutProgram {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  title        String
  description  String
  durationWeeks Int
  daysPerWeek  Int
  exercises    Exercise[]
  difficulty   DifficultyLevel
  createdAt    DateTime   @default(now()) @map("created_at")
  sessions     WorkoutSession[]

  @@index([userId, difficulty])
}

model WorkoutSession {
  id           String     @id @default(uuid())
  program      WorkoutProgram @relation(fields: [programId], references: [id])
  programId    String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime
  duration     Int        // in minutes
  completed    Boolean    @default(false)
  notes        String?
  exercisesLogged Json    // Tracked exercises with sets/reps/weight
  progressLogs ProgressLog[]

  @@index([userId, date])
}

model Challenge {
  id           String     @id @default(uuid())
  title        String
  description  String
  type         ChallengeType
  durationDays Int
  difficulty   DifficultyLevel
  startDate    DateTime
  endDate      DateTime
  dailyTasks   Json       // Structure for daily objectives
  participants UserChallenge[]
  reward       String?
  createdAt    DateTime   @default(now()) @map("created_at")

  @@index([type, difficulty])
}

model UserChallenge {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  challenge    Challenge  @relation(fields: [challengeId], references: [id])
  challengeId  String
  progress     Int        @default(0)
  completed    Boolean    @default(false)
  lastUpdated  DateTime   @default(now())

  @@index([userId, challengeId])
  @@unique([userId, challengeId])
}

enum ProgressType {
  WEIGHT
  BODY_FAT
}

model ProgressLog {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  type         ProgressType
  value        Float
  notes        String?
  photos       String[]      
  workout      WorkoutSession? @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId String?
  loggedAt     DateTime      @default(now()) @map("logged_at")

  @@index([userId, type, loggedAt])
  @@index([workoutSessionId])
}

model BodyMeasurement {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  chest        Float?
  waist        Float?
  hips         Float?
  arms         Float?
  thighs       Float?
  loggedAt     DateTime   @default(now()) @map("logged_at")

  @@index([userId, loggedAt])
}

model AIHealthAssessment {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  assessmentDate DateTime @default(now())
  healthData   Json       // Input data used for assessment
  recommendations Json    // AI-generated recommendations
  score        Int?
  createdAt    DateTime   @default(now()) @map("created_at")

  @@index([userId, assessmentDate])
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Feedback {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  content      String
  status       FeedbackStatus @default(OPEN)
  metadata     Json?      // Browser/device info
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@index([userId, status, createdAt])
}
